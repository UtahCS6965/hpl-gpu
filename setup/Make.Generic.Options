#############################################################################################################
#HPL-GPU 1.2 Options File for generic configuration
#This file lists all mandatory options at the top, and optional tuning options in the end.
#Some options can be configured via the traditional -DHPL... interface and with the new HPL_PARAMDEFS
#interface. In this case, both variants are provided for reference, the new interface outcommented as "#NEW#"
#############################################################################################################

#This option defines whether HPL-GPU is compiled with MPI for multi-node support
HPL_CONFIG_MPI = 0

#This option defines the verbosity level of HPL-GPU. The setting ranges from 0 (no output) to 4 (very verbose), default is 3. For many-node runs the suggested setting is 1.
HPL_CONFIG_VERBOSE = 3

#Select the backend for CALDGEMM, the default is opencl (possible options: cal, cuda, opencl, cpu
HPL_CALDGEMM_BACKEND = opencl

#This defines the CPU core(s) used for MPI communication.
HPL_DEFS     += -DHPL_MPI_AFFINITY="{1}"

#############################################################################################################
#All the following are optional tuning options
#############################################################################################################

#This setting links HPL to libcpufreq, allowing to change CPU frequencies during runtime. This can be used to obtain better efficiency.
#HPL_DEFS     += -DHPL_CPUFREQ

#These settings cal alter certain parameters during runtime. The first setting is insider HPL, the second for CALDGEMM parameters. The example alters the CPU frequency over time and disables some GPUs towards the end for better efficiency.
#HPL_DEFS     += -DHPL_CUSTOM_PARAMETER_CHANGE="if (j == startrow) setcpufreq(3000000, 3000000);"
#HPL_DEFS     += -DHPL_CUSTOM_PARAMETER_CHANGE_CALDGEMM="cal_dgemm->SetNumberDevices(global_m_remain < 25000 ? 1 : (global_m_remain < 35000 ? 2 : (global_m_remain < 50000 ? 3 : 4)));if (curcpufreq >= 2200000 && global_m_remain > 100000) setcpufreq(2200000, 1200000); else if (global_m_remain < 50000 && global_m_remain >= 50000 - K) setcpufreq(2700000, 1200000); else if (global_m_remain < 70000 && global_m_remain >= 70000 - K) setcpufreq(2400000, 2400000); else if (global_m_remain < 85000 && global_m_remain >= 85000 - K) setcpufreq(2200000, 2200000); else if (global_m_remain < 95000 && global_m_remain >= 95000 - K) setcpufreq(2000000, 2000000);"

#As above, but this time we modify some factorization parameters over time. (Relevant for older AMD processors)
#HPL_DEFS     += -DHPL_CUSTOM_PARAMETER_CHANGE="ALGO->nbmin = j > 45000 ? 64 : 32;"

#Temperature threshold when run is aborted. Requires CALDGEMM to be compiled with ADL support.
#HPL_DEFS     += -DHPL_GPU_TEMPERATURE_THRESHOLD=92.
