#############################################################################################################
#HPL-GPU 2.0 Options File for generic configuration
#This file lists all mandatory options at the top, and optional tuning options in the end.
#Some options can be configured via the traditional -DHPL... interface and with the new HPL_PARAMDEFS
#interface. In this case, both variants are provided for reference, the new interface outcommented as "#NEW#"
#############################################################################################################

#Any custom options here
#HPL_DEFS      += 

#This option defines whether HPL-GPU is compiled with MPI for multi-node support
HPL_CONFIG_MPI = 0

#This option defines the verbosity level of HPL-GPU. The setting ranges from 0 (no output) to 4 (very verbose), default is 3. For many-node runs the suggested setting is 1.
HPL_CONFIG_VERBOSE = 3

#Select the backend for CALDGEMM, the default is opencl (possible options: cal, cuda, opencl, cpu
HPL_CALDGEMM_BACKEND = opencl

#############################################################################################################
#All the following are optional tuning options
#############################################################################################################

#Use Link time optimization and agressive compiler optimization flags
HPL_USE_LTO   = 1
HPL_AGGRESSIVE_OPTIMIZATION = 1

#This setting links HPL to libcpufreq, allowing to change CPU frequencies during runtime. This can be used to obtain better efficiency.
HPL_DEFS     += -DHPL_CPUPOWER

#These settings cal alter certain parameters during runtime. The first setting is insider HPL, the second for CALDGEMM parameters. The example alters the CPU frequency over time and disables some GPUs towards the end for better efficiency.
HPL_DEFS      += -DHPL_CUSTOM_PARAMETER_CHANGE="if (j == startrow) setcpufreq(3300000, 3300000);"
HPL_DEFS      += -DHPL_CUSTOM_PARAMETER_CHANGE_CALDGEMM="if (global_m_remain > 78000) setcpufreq(1800000, 1800000); else setcpufreq(2500000, 2500000);               if (factorize_first_iteration || global_m_remain > 56000) cal_dgemm->SetNumberDevices(4); else cal_dgemm->SetNumberDevices(8);              if (factorize_first_iteration || global_m_remain > 50000) cal_info.PipelinedMidMarker = 25000; else cal_info.PipelinedMidMarker = global_m_remain / 2 + 1000;"

#Temperature threshold when run is aborted. Requires CALDGEMM to be compiled with ADL support.
#HPL_DEFS     += -DHPL_GPU_TEMPERATURE_THRESHOLD=92.

#Use AVX LASPW implementation
HPL_DEFS      += -DHPL_LASWP_AVX 
